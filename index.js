/** –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å 
 * –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
 *  –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π
 *  - @matthew_parker. */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import TelegramBot from "node-telegram-bot-api"; // Telegram Bot API
import {NFTApi,Configuration,} from 'tonapi-sdk-js'; // TON API
import TonWeb from "tonweb"; // API TON 
import fetch from 'node-fetch';
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const authToken = "PASTE_HERE_YOUR_AUTH_TOKEN"; // —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ TON API  https://t.me/tonapi_bot - /get_client_key
const collectionAddress = "PASTE_HERE_YOUR_COLLECTION_ADDRESS";  // –∞–¥—Ä–µ—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
let token = 'PASTE_HERE_YOUR_BOT_TOKEN'; /// —Ç–æ–∫–µ–Ω –∞—É—Ç–µ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–æ—Ç–∞ (```https://t.me/BotFather```)

const bot = new TelegramBot(token, {polling: true}); // Telegram Bot Object
const Address = TonWeb.utils.Address;
const authPhrase = 'Bearer ' + authToken; 

const nftApi = new NFTApi(new Configuration({
  headers: {
      // To get unlimited requests
      Authorization: authPhrase,
  },
  fetchApi: fetch
})); // NFT API Object

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bot.onText(/\/start/, function onStartText(msg) // On /start message
{
    bot.sendMessage(msg.chat.id,
      "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å*üëã\n" +
      "\n" +
      "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ NFT, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.\n", {parse_mode: 'Markdown'});
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  if(msg.text === "/start") return;
  try
  {
    let nftCount = 0;
    const { nftItems } = await nftApi.getNftItemsByCollectionAddress({account: collectionAddress});
    nftItems.forEach(nftItem => {
      let address = new Address(nftItem.owner.address).toString(true, true, true);
      if(address == msg.text)
      {
        nftCount++;
        bot.sendPhoto(chatId, nftItem.metadata.image, 
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üß© –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Explorer üß©', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
                  url: 'https://explorer.tonnft.tools/nft/' + new Address(nftItem.address).toString(true, true, true) // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
                }
              ]
            ]
          },
          parse_mode: 'Markdown',
          caption: 
          "*Name: " + nftItem.metadata.name + "*\n" +
          "*Address: " + new Address(nftItem.address).toString(true, true, true) + "*\n" +
          "*Index: " + nftItem.index + "*\n",
        });
      }
    });
    if(nftCount == 0)
    {
      bot.sendMessage(msg.chat.id,
        "–ü–æ –≤–∞—à–µ–º—É –∞–¥—Ä–µ—Å—É –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n", {parse_mode: 'Markdown'});
    }
  }
  catch(error)
  {
    console.log(error);
  }
});

